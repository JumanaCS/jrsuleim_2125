{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww23660\viewh14520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Homework 1:  Measuring the energy between atoms in a molecular dynamics simulation is a very common calculation which computers are used to solve, to model the movement of molecules like proteins, enzymes, DNA, RNA in order to better understand how they perform their functions in biology and chemistry.  A very simple version of this calculation is shown in the algorithm below.  For a system with N atoms, there will be an N by 3 array of doubles, representing the coordinates of each atom in 3 dimensional space.  (i.e. for each atom, the x, y, and z coordinates are specified).  Then, based on the distance between atoms, a calculation is performed that represents the energy.  For this exercise we\'92ll use a very simplified version of the energy, but just realize that the real calculation is a bit more complex and contains more terms.  For simplicity assume that invoking Math.sqrt costs us 12 ticks of the clock:.  Also assume that Math.pow invocations cost 8 + 3*P ticks (where P is the second argument, the power to which the first argument is raised).\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0  1	public double calculateEnergy(double[][] coords, double[] eps, int numAtoms) \{\
\
 2             double energySum = 0.0;\
 3             double r0 = 1.2;\
 4             for (int i = 0; i < numAtoms-1; i++) \{\
 5                   for (int  j = 0; j < numAtoms; j++) \{\
 6                         double distance = Math.sqrt( Math.pow(coords[i][0] - coords[j][0], 2 ) + \
 7                                                                        Math.pow(coords[i][1] - coords[j][1], 2 ) + \
 8                                                                        Math.pow(coords[i][2] - coords[j][2], 2 )    );\
 9                         double term2 = Math.pow( (r0/distance), 12 ) ;\
10                        double term1 = Math.pow( (r0/distance),  6) ;\
11                        double epsilon = Math.sqrt( eps[i] * eps[i] + eps[j] * eps[j]);\
12                        energySum = energySum + (4.0 * epsilon * (term1 - 2.0 * term2) );\
13                  \}\
14             \}\
15            return energySum;\
16     \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \
This is the basic form of what is known as a 6-12 potential, and the names is based on the power of the r0/distance terms.  Perform a detailed analysis of this algorithm using the rules we discussed, and also state the big-O signature of this algorithm.\
\
BONUS:  (15 points) The inner loop, that cycles over values of j, in reality should look like this:\
\
			for (int j= i+1; j < numAtoms; j++)\
\
Revisit your analysis with this new piece of information\'85\
\
Submission:  Upload your document with your analysis into gitlab, in a subdirectory of your git repository named HW1.  If you do the bonus, save that analysis in a separate file in a separate subdirectory of HW1 called \'93bonus\'94.}